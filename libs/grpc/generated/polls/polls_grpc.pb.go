// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: polls.proto

package polls

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PollsClient is the client API for Polls service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PollsClient interface {
	CreatePoll(ctx context.Context, in *CreatePollRequest, opts ...grpc.CallOption) (*CreatePollResponse, error)
	GetActivePolls(ctx context.Context, in *GetActivePollsRequest, opts ...grpc.CallOption) (*GetActivePollsResponse, error)
	StopPoll(ctx context.Context, in *StopPollRequest, opts ...grpc.CallOption) (*StopPollResponse, error)
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error)
}

type pollsClient struct {
	cc grpc.ClientConnInterface
}

func NewPollsClient(cc grpc.ClientConnInterface) PollsClient {
	return &pollsClient{cc}
}

func (c *pollsClient) CreatePoll(ctx context.Context, in *CreatePollRequest, opts ...grpc.CallOption) (*CreatePollResponse, error) {
	out := new(CreatePollResponse)
	err := c.cc.Invoke(ctx, "/polls.Polls/CreatePoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollsClient) GetActivePolls(ctx context.Context, in *GetActivePollsRequest, opts ...grpc.CallOption) (*GetActivePollsResponse, error) {
	out := new(GetActivePollsResponse)
	err := c.cc.Invoke(ctx, "/polls.Polls/GetActivePolls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollsClient) StopPoll(ctx context.Context, in *StopPollRequest, opts ...grpc.CallOption) (*StopPollResponse, error) {
	out := new(StopPollResponse)
	err := c.cc.Invoke(ctx, "/polls.Polls/StopPoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pollsClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteResponse, error) {
	out := new(VoteResponse)
	err := c.cc.Invoke(ctx, "/polls.Polls/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PollsServer is the server API for Polls service.
// All implementations must embed UnimplementedPollsServer
// for forward compatibility
type PollsServer interface {
	CreatePoll(context.Context, *CreatePollRequest) (*CreatePollResponse, error)
	GetActivePolls(context.Context, *GetActivePollsRequest) (*GetActivePollsResponse, error)
	StopPoll(context.Context, *StopPollRequest) (*StopPollResponse, error)
	Vote(context.Context, *VoteRequest) (*VoteResponse, error)
	mustEmbedUnimplementedPollsServer()
}

// UnimplementedPollsServer must be embedded to have forward compatible implementations.
type UnimplementedPollsServer struct {
}

func (UnimplementedPollsServer) CreatePoll(context.Context, *CreatePollRequest) (*CreatePollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoll not implemented")
}
func (UnimplementedPollsServer) GetActivePolls(context.Context, *GetActivePollsRequest) (*GetActivePollsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActivePolls not implemented")
}
func (UnimplementedPollsServer) StopPoll(context.Context, *StopPollRequest) (*StopPollResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPoll not implemented")
}
func (UnimplementedPollsServer) Vote(context.Context, *VoteRequest) (*VoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedPollsServer) mustEmbedUnimplementedPollsServer() {}

// UnsafePollsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PollsServer will
// result in compilation errors.
type UnsafePollsServer interface {
	mustEmbedUnimplementedPollsServer()
}

func RegisterPollsServer(s grpc.ServiceRegistrar, srv PollsServer) {
	s.RegisterService(&Polls_ServiceDesc, srv)
}

func _Polls_CreatePoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollsServer).CreatePoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/polls.Polls/CreatePoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollsServer).CreatePoll(ctx, req.(*CreatePollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polls_GetActivePolls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActivePollsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollsServer).GetActivePolls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/polls.Polls/GetActivePolls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollsServer).GetActivePolls(ctx, req.(*GetActivePollsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polls_StopPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollsServer).StopPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/polls.Polls/StopPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollsServer).StopPoll(ctx, req.(*StopPollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Polls_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PollsServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/polls.Polls/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PollsServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Polls_ServiceDesc is the grpc.ServiceDesc for Polls service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Polls_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "polls.Polls",
	HandlerType: (*PollsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePoll",
			Handler:    _Polls_CreatePoll_Handler,
		},
		{
			MethodName: "GetActivePolls",
			Handler:    _Polls_GetActivePolls_Handler,
		},
		{
			MethodName: "StopPoll",
			Handler:    _Polls_StopPoll_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Polls_Vote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "polls.proto",
}
