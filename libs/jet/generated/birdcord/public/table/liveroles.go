//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Liveroles = newLiverolesTable("public", "liveroles", "")

type liverolesTable struct {
	postgres.Table

	// Columns
	ID             postgres.ColumnInteger
	DiscordRoleID  postgres.ColumnInteger
	DiscordGuildID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type LiverolesTable struct {
	liverolesTable

	EXCLUDED liverolesTable
}

// AS creates new LiverolesTable with assigned alias
func (a LiverolesTable) AS(alias string) *LiverolesTable {
	return newLiverolesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new LiverolesTable with assigned schema name
func (a LiverolesTable) FromSchema(schemaName string) *LiverolesTable {
	return newLiverolesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new LiverolesTable with assigned table prefix
func (a LiverolesTable) WithPrefix(prefix string) *LiverolesTable {
	return newLiverolesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new LiverolesTable with assigned table suffix
func (a LiverolesTable) WithSuffix(suffix string) *LiverolesTable {
	return newLiverolesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newLiverolesTable(schemaName, tableName, alias string) *LiverolesTable {
	return &LiverolesTable{
		liverolesTable: newLiverolesTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newLiverolesTableImpl("", "excluded", ""),
	}
}

func newLiverolesTableImpl(schemaName, tableName, alias string) liverolesTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		DiscordRoleIDColumn  = postgres.IntegerColumn("discord_role_id")
		DiscordGuildIDColumn = postgres.IntegerColumn("discord_guild_id")
		allColumns           = postgres.ColumnList{IDColumn, DiscordRoleIDColumn, DiscordGuildIDColumn}
		mutableColumns       = postgres.ColumnList{DiscordRoleIDColumn, DiscordGuildIDColumn}
	)

	return liverolesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		DiscordRoleID:  DiscordRoleIDColumn,
		DiscordGuildID: DiscordGuildIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
