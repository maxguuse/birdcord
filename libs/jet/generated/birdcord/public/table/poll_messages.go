//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PollMessages = newPollMessagesTable("public", "poll_messages", "")

type pollMessagesTable struct {
	postgres.Table

	// Columns
	ID               postgres.ColumnInteger
	PollID           postgres.ColumnInteger
	DiscordMessageID postgres.ColumnInteger
	DiscordChannelID postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PollMessagesTable struct {
	pollMessagesTable

	EXCLUDED pollMessagesTable
}

// AS creates new PollMessagesTable with assigned alias
func (a PollMessagesTable) AS(alias string) *PollMessagesTable {
	return newPollMessagesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PollMessagesTable with assigned schema name
func (a PollMessagesTable) FromSchema(schemaName string) *PollMessagesTable {
	return newPollMessagesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PollMessagesTable with assigned table prefix
func (a PollMessagesTable) WithPrefix(prefix string) *PollMessagesTable {
	return newPollMessagesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PollMessagesTable with assigned table suffix
func (a PollMessagesTable) WithSuffix(suffix string) *PollMessagesTable {
	return newPollMessagesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPollMessagesTable(schemaName, tableName, alias string) *PollMessagesTable {
	return &PollMessagesTable{
		pollMessagesTable: newPollMessagesTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newPollMessagesTableImpl("", "excluded", ""),
	}
}

func newPollMessagesTableImpl(schemaName, tableName, alias string) pollMessagesTable {
	var (
		IDColumn               = postgres.IntegerColumn("id")
		PollIDColumn           = postgres.IntegerColumn("poll_id")
		DiscordMessageIDColumn = postgres.IntegerColumn("discord_message_id")
		DiscordChannelIDColumn = postgres.IntegerColumn("discord_channel_id")
		allColumns             = postgres.ColumnList{IDColumn, PollIDColumn, DiscordMessageIDColumn, DiscordChannelIDColumn}
		mutableColumns         = postgres.ColumnList{PollIDColumn, DiscordMessageIDColumn, DiscordChannelIDColumn}
	)

	return pollMessagesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		PollID:           PollIDColumn,
		DiscordMessageID: DiscordMessageIDColumn,
		DiscordChannelID: DiscordChannelIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
