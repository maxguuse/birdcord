// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: liveroles.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLiveRole = `-- name: CreateLiveRole :one
INSERT INTO liveroles (role_id) VALUES ($1) RETURNING id, role_id
`

func (q *Queries) CreateLiveRole(ctx context.Context, roleID int32) (Liverole, error) {
	row := q.db.QueryRow(ctx, createLiveRole, roleID)
	var i Liverole
	err := row.Scan(&i.ID, &i.RoleID)
	return i, err
}

const deleteLiveRoleByRoleID = `-- name: DeleteLiveRoleByRoleID :exec
DELETE FROM liveroles WHERE role_id = $1
`

func (q *Queries) DeleteLiveRoleByRoleID(ctx context.Context, roleID int32) error {
	_, err := q.db.Exec(ctx, deleteLiveRoleByRoleID, roleID)
	return err
}

const getLiveRoleByDiscordID = `-- name: GetLiveRoleByDiscordID :one
SELECT liveroles.id, role_id, roles.id, guild_id, discord_role_id FROM liveroles
LEFT JOIN roles ON liveroles.role_id = roles.id
WHERE roles.discord_role_id = $1
AND roles.guild_id = $2
`

type GetLiveRoleByDiscordIDParams struct {
	DiscordRoleID string `json:"discord_role_id"`
	GuildID       int32  `json:"guild_id"`
}

type GetLiveRoleByDiscordIDRow struct {
	ID            int32       `json:"id"`
	RoleID        int32       `json:"role_id"`
	ID_2          pgtype.Int4 `json:"id_2"`
	GuildID       pgtype.Int4 `json:"guild_id"`
	DiscordRoleID pgtype.Text `json:"discord_role_id"`
}

func (q *Queries) GetLiveRoleByDiscordID(ctx context.Context, arg GetLiveRoleByDiscordIDParams) (GetLiveRoleByDiscordIDRow, error) {
	row := q.db.QueryRow(ctx, getLiveRoleByDiscordID, arg.DiscordRoleID, arg.GuildID)
	var i GetLiveRoleByDiscordIDRow
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.ID_2,
		&i.GuildID,
		&i.DiscordRoleID,
	)
	return i, err
}

const getLiveRolesByGuildID = `-- name: GetLiveRolesByGuildID :many
SELECT liveroles.id, role_id, roles.id, guild_id, discord_role_id FROM liveroles 
LEFT JOIN roles ON liveroles.role_id = roles.id
WHERE roles.guild_id = $1
`

type GetLiveRolesByGuildIDRow struct {
	ID            int32       `json:"id"`
	RoleID        int32       `json:"role_id"`
	ID_2          pgtype.Int4 `json:"id_2"`
	GuildID       pgtype.Int4 `json:"guild_id"`
	DiscordRoleID pgtype.Text `json:"discord_role_id"`
}

func (q *Queries) GetLiveRolesByGuildID(ctx context.Context, guildID int32) ([]GetLiveRolesByGuildIDRow, error) {
	rows, err := q.db.Query(ctx, getLiveRolesByGuildID, guildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLiveRolesByGuildIDRow
	for rows.Next() {
		var i GetLiveRolesByGuildIDRow
		if err := rows.Scan(
			&i.ID,
			&i.RoleID,
			&i.ID_2,
			&i.GuildID,
			&i.DiscordRoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
