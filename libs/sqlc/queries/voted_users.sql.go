// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: voted_users.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addVotedUser = `-- name: AddVotedUser :exec
INSERT INTO voted_users (
    discord_id,
    option_id,
    poll_id
) VALUES (
    $1, $2, $3
) RETURNING id, discord_id, option_id, poll_id
`

type AddVotedUserParams struct {
	DiscordID pgtype.Text `json:"discord_id"`
	OptionID  pgtype.Int4 `json:"option_id"`
	PollID    pgtype.Int4 `json:"poll_id"`
}

func (q *Queries) AddVotedUser(ctx context.Context, arg AddVotedUserParams) error {
	_, err := q.db.Exec(ctx, addVotedUser, arg.DiscordID, arg.OptionID, arg.PollID)
	return err
}

const getUserByIdForPoll = `-- name: GetUserByIdForPoll :one
SELECT id, discord_id, option_id, poll_id FROM voted_users
         WHERE discord_id = $1 AND poll_id = $2
`

type GetUserByIdForPollParams struct {
	DiscordID pgtype.Text `json:"discord_id"`
	PollID    pgtype.Int4 `json:"poll_id"`
}

func (q *Queries) GetUserByIdForPoll(ctx context.Context, arg GetUserByIdForPollParams) (VotedUser, error) {
	row := q.db.QueryRow(ctx, getUserByIdForPoll, arg.DiscordID, arg.PollID)
	var i VotedUser
	err := row.Scan(
		&i.ID,
		&i.DiscordID,
		&i.OptionID,
		&i.PollID,
	)
	return i, err
}
