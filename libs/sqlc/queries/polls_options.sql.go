// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: polls_options.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOption = `-- name: CreateOption :one
INSERT INTO polls_options (
    title,
    poll_id
) VALUES (
    $1, $2
) RETURNING id, title, poll_id
`

type CreateOptionParams struct {
	Title  pgtype.Text `json:"title"`
	PollID pgtype.Int4 `json:"poll_id"`
}

func (q *Queries) CreateOption(ctx context.Context, arg CreateOptionParams) (PollsOption, error) {
	row := q.db.QueryRow(ctx, createOption, arg.Title, arg.PollID)
	var i PollsOption
	err := row.Scan(&i.ID, &i.Title, &i.PollID)
	return i, err
}

const getOptionsWithVotesCount = `-- name: GetOptionsWithVotesCount :many

SELECT polls_options.id, polls_options.title, COUNT(voted_users.id)::integer AS vote_count
FROM polls_options
         LEFT JOIN voted_users ON polls_options.id = voted_users.option_id
WHERE polls_options.poll_id = $1
GROUP BY polls_options.id, polls_options.title
ORDER BY polls_options.id
`

type GetOptionsWithVotesCountRow struct {
	ID        int32       `json:"id"`
	Title     pgtype.Text `json:"title"`
	VoteCount int32       `json:"vote_count"`
}

// SELECT polls_options.id, polls_options.title, COUNT(voted_users.id)::integer AS vote_count
// FROM polls_options
//
//	LEFT JOIN voted_users ON polls_options.id = voted_users.option_id
//
// WHERE polls_options.poll_id = $1
// GROUP BY polls_options.id, polls_options.title;
func (q *Queries) GetOptionsWithVotesCount(ctx context.Context, pollID pgtype.Int4) ([]GetOptionsWithVotesCountRow, error) {
	rows, err := q.db.Query(ctx, getOptionsWithVotesCount, pollID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOptionsWithVotesCountRow
	for rows.Next() {
		var i GetOptionsWithVotesCountRow
		if err := rows.Scan(&i.ID, &i.Title, &i.VoteCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
