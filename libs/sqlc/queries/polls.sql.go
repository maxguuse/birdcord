// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: polls.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPoll = `-- name: CreatePoll :one
INSERT INTO polls (
    title, discord_id, discord_author_id, discord_guild_id, channel_id
)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, discord_id, discord_author_id, discord_guild_id, active, channel_id
`

type CreatePollParams struct {
	Title           pgtype.Text `json:"title"`
	DiscordID       pgtype.Text `json:"discord_id"`
	DiscordAuthorID pgtype.Text `json:"discord_author_id"`
	DiscordGuildID  pgtype.Text `json:"discord_guild_id"`
	ChannelID       pgtype.Text `json:"channel_id"`
}

func (q *Queries) CreatePoll(ctx context.Context, arg CreatePollParams) (Poll, error) {
	row := q.db.QueryRow(ctx, createPoll,
		arg.Title,
		arg.DiscordID,
		arg.DiscordAuthorID,
		arg.DiscordGuildID,
		arg.ChannelID,
	)
	var i Poll
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DiscordID,
		&i.DiscordAuthorID,
		&i.DiscordGuildID,
		&i.Active,
		&i.ChannelID,
	)
	return i, err
}

const getActivePolls = `-- name: GetActivePolls :many
SELECT id, title FROM polls
         WHERE discord_guild_id = $1 AND active = true
`

type GetActivePollsRow struct {
	ID    int32       `json:"id"`
	Title pgtype.Text `json:"title"`
}

func (q *Queries) GetActivePolls(ctx context.Context, discordGuildID pgtype.Text) ([]GetActivePollsRow, error) {
	rows, err := q.db.Query(ctx, getActivePolls, discordGuildID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActivePollsRow
	for rows.Next() {
		var i GetActivePollsRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPoll = `-- name: GetPoll :one
SELECT id, title, discord_id, discord_author_id, discord_guild_id, active, channel_id FROM polls
         WHERE id = $1
`

func (q *Queries) GetPoll(ctx context.Context, id int32) (Poll, error) {
	row := q.db.QueryRow(ctx, getPoll, id)
	var i Poll
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.DiscordID,
		&i.DiscordAuthorID,
		&i.DiscordGuildID,
		&i.Active,
		&i.ChannelID,
	)
	return i, err
}

const getToken = `-- name: GetToken :one
SELECT discord_id FROM polls
                     WHERE id = $1
`

func (q *Queries) GetToken(ctx context.Context, id int32) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getToken, id)
	var discord_id pgtype.Text
	err := row.Scan(&discord_id)
	return discord_id, err
}

const stopPoll = `-- name: StopPoll :exec
UPDATE polls
    SET active = FALSE
    WHERE id = $1
`

func (q *Queries) StopPoll(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, stopPoll, id)
	return err
}
