// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: polls.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPoll = `-- name: CreatePoll :one
INSERT INTO polls (
    title,
    discord_token
) VALUES (
    $1, $2
) RETURNING id, title, discord_token
`

type CreatePollParams struct {
	Title        pgtype.Text `json:"title"`
	DiscordToken pgtype.Text `json:"discord_token"`
}

func (q *Queries) CreatePoll(ctx context.Context, arg CreatePollParams) (Poll, error) {
	row := q.db.QueryRow(ctx, createPoll, arg.Title, arg.DiscordToken)
	var i Poll
	err := row.Scan(&i.ID, &i.Title, &i.DiscordToken)
	return i, err
}

const getPoll = `-- name: GetPoll :one
SELECT id, title, discord_token FROM polls
         WHERE id = $1
`

func (q *Queries) GetPoll(ctx context.Context, id int32) (Poll, error) {
	row := q.db.QueryRow(ctx, getPoll, id)
	var i Poll
	err := row.Scan(&i.ID, &i.Title, &i.DiscordToken)
	return i, err
}

const getPolls = `-- name: GetPolls :many
SELECT id, title FROM polls
`

type GetPollsRow struct {
	ID    int32       `json:"id"`
	Title pgtype.Text `json:"title"`
}

func (q *Queries) GetPolls(ctx context.Context) ([]GetPollsRow, error) {
	rows, err := q.db.Query(ctx, getPolls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPollsRow
	for rows.Next() {
		var i GetPollsRow
		if err := rows.Scan(&i.ID, &i.Title); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getToken = `-- name: GetToken :one
SELECT discord_token FROM polls
                     WHERE id = $1
`

func (q *Queries) GetToken(ctx context.Context, id int32) (pgtype.Text, error) {
	row := q.db.QueryRow(ctx, getToken, id)
	var discord_token pgtype.Text
	err := row.Scan(&discord_token)
	return discord_token, err
}
