// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: poll_options.sql

package queries

import (
	"context"
)

const createPollOption = `-- name: CreatePollOption :one
INSERT INTO poll_options (
    title, 
    poll_id
) VALUES (
    $1, $2
) RETURNING id, title, poll_id
`

type CreatePollOptionParams struct {
	Title  string `json:"title"`
	PollID int32  `json:"poll_id"`
}

func (q *Queries) CreatePollOption(ctx context.Context, arg CreatePollOptionParams) (PollOption, error) {
	row := q.db.QueryRow(ctx, createPollOption, arg.Title, arg.PollID)
	var i PollOption
	err := row.Scan(&i.ID, &i.Title, &i.PollID)
	return i, err
}

const createPollOptions = `-- name: CreatePollOptions :many
INSERT INTO poll_options ("title", "poll_id") 
VALUES (UNNEST($1::varchar[]), $2)
RETURNING poll_options.id, poll_options.title, poll_options.poll_id
`

type CreatePollOptionsParams struct {
	Titles []string `json:"titles"`
	PollID int32    `json:"poll_id"`
}

type CreatePollOptionsRow struct {
	PollOption PollOption `json:"poll_option"`
}

func (q *Queries) CreatePollOptions(ctx context.Context, arg CreatePollOptionsParams) ([]CreatePollOptionsRow, error) {
	rows, err := q.db.Query(ctx, createPollOptions, arg.Titles, arg.PollID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CreatePollOptionsRow
	for rows.Next() {
		var i CreatePollOptionsRow
		if err := rows.Scan(&i.PollOption.ID, &i.PollOption.Title, &i.PollOption.PollID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deletePollOption = `-- name: DeletePollOption :exec
DELETE FROM poll_options
WHERE id = $1
`

func (q *Queries) DeletePollOption(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePollOption, id)
	return err
}

const getPollOptions = `-- name: GetPollOptions :many
SELECT id, title, poll_id FROM poll_options
WHERE poll_id = $1
`

func (q *Queries) GetPollOptions(ctx context.Context, pollID int32) ([]PollOption, error) {
	rows, err := q.db.Query(ctx, getPollOptions, pollID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PollOption
	for rows.Next() {
		var i PollOption
		if err := rows.Scan(&i.ID, &i.Title, &i.PollID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
