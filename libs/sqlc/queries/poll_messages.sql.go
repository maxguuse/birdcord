// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: poll_messages.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPollMessage = `-- name: CreatePollMessage :one
INSERT INTO poll_messages (
    poll_id, 
    message_id
) VALUES (
    $1, $2
) RETURNING id, message_id, poll_id
`

type CreatePollMessageParams struct {
	PollID    int32 `json:"poll_id"`
	MessageID int32 `json:"message_id"`
}

func (q *Queries) CreatePollMessage(ctx context.Context, arg CreatePollMessageParams) (PollMessage, error) {
	row := q.db.QueryRow(ctx, createPollMessage, arg.PollID, arg.MessageID)
	var i PollMessage
	err := row.Scan(&i.ID, &i.MessageID, &i.PollID)
	return i, err
}

const deletePollMessageById = `-- name: DeletePollMessageById :exec
DELETE FROM poll_messages WHERE id = $1
`

func (q *Queries) DeletePollMessageById(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deletePollMessageById, id)
	return err
}

const getFullPollMessages = `-- name: GetFullPollMessages :many
SELECT pm.id, pm.message_id, m.discord_message_id, m.discord_channel_id
FROM poll_messages pm 
LEFT JOIN messages m ON pm.message_id = m.id
WHERE pm.poll_id = $1
`

type GetFullPollMessagesRow struct {
	ID               int32       `json:"id"`
	MessageID        int32       `json:"message_id"`
	DiscordMessageID pgtype.Text `json:"discord_message_id"`
	DiscordChannelID pgtype.Text `json:"discord_channel_id"`
}

func (q *Queries) GetFullPollMessages(ctx context.Context, pollID int32) ([]GetFullPollMessagesRow, error) {
	rows, err := q.db.Query(ctx, getFullPollMessages, pollID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFullPollMessagesRow
	for rows.Next() {
		var i GetFullPollMessagesRow
		if err := rows.Scan(
			&i.ID,
			&i.MessageID,
			&i.DiscordMessageID,
			&i.DiscordChannelID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPollMessageByMessageId = `-- name: GetPollMessageByMessageId :one
SELECT id, message_id, poll_id FROM poll_messages WHERE message_id = $1
`

func (q *Queries) GetPollMessageByMessageId(ctx context.Context, messageID int32) (PollMessage, error) {
	row := q.db.QueryRow(ctx, getPollMessageByMessageId, messageID)
	var i PollMessage
	err := row.Scan(&i.ID, &i.MessageID, &i.PollID)
	return i, err
}

const getPollMessages = `-- name: GetPollMessages :many
SELECT id, message_id, poll_id FROM poll_messages WHERE poll_id = $1
`

func (q *Queries) GetPollMessages(ctx context.Context, pollID int32) ([]PollMessage, error) {
	rows, err := q.db.Query(ctx, getPollMessages, pollID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PollMessage
	for rows.Next() {
		var i PollMessage
		if err := rows.Scan(&i.ID, &i.MessageID, &i.PollID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
